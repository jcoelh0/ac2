1 ex ler o primeiro switch e ver se é 0 ou 1

No adc é ler o buffer e imprimir nos displays de 0 a F
No ex 2 de adc é a mesma cena mas meter em decimal
Mas já está lá um conversor para decimal
E o último é fazer o 2 mas por interrupção

Se o switch 1 tiver a 1 ele vai acender o led 5, depois o 4 até ao 0 e depois volta do 0 ao 1 e o intervalo de mudança dos Leds é tipo 0.1 segundos
Caso o switch 1 esteja a 0 ele faz a mesma cena mas o tempo de duração de cada led é 0.1


delay:	
ford:	beqz $a0, endfd

		li 	$v0, 12
 		syscall 					# resetCoreTimer();
 		
whiled:	li 	$v0, 11 	
 		syscall 				
				
 		blt $v0, 20000, whiled 		# while(readCoreTimer() < 20000);
 		
 		sub $a0, $a0, 1
	 	j 	ford					# }
endfd:
 		jr 	$ra 					#
 		
 		
 		
contaddor johnson 4bits desloc a esquerda

			lw 	$t2, LATE($t1)
		
		xori $t3, $t2, 0x0001
		andi $t3, $t3, 0x0001
		
		srl $t2, $t2, 1
		
		sll $t3, $t3, 3
		
		or	$t2, $t2, $t3
		sw 	$t2, LATE($t1)
		
	
	
C

void delay(int ms)
{
	for(; ms > 0; ms--)
	{
		resetCoreTimer();
		while(readCoreTimer() < 20000);
	}
}


// send "segment" value to display
LATB = (LATB & 0x80FF) | (segment << 8);


void send2displays(unsigned char value)
{
	static const char display7Scodes[] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,
	0x67,0x77,0x7C,0x39,0x5E,0x79,0x71};
	
	static unsigned char displayFlag = 0;
	
	unsigned char first = value & 0x0F;
	first = display7Scodes[first];
	unsigned char second = value >> 4;
	second = display7Scodes[second];
 	
 	if(!displayFlag) 		// send digit_high to display_high
 	{
 		LATDbits.LATD6 = 0;
		LATDbits.LATD5 = 1;
 		LATB = (LATB & 0x80FF) | (first << 8);
 	}
 	else 			 		// send digit_low to display_low
 	{
 		LATDbits.LATD6 = 1;
		LATDbits.LATD5 = 0;
 		LATB = (LATB & 0x80FF) | (second << 8);
 	}
 	displayFlag = !displayFlag;
} 

????????????????
unsigned char toBcd(unsigned char value)
 {
 return ((value / 10) << 4) + (value % 10);
 } 
 
 
 
 
Reescreva o programa principal, tal como se esquematiza abaixo, de modo a invocar a
função send2displays() com uma frequência de 20 Hz (i.e., a cada 50 ms),
continuando a usar a função delay() para determinar as frequências de
refrescamento (20 Hz) e de contagem (5 Hz).

do
{
	delay(50);
	disp = (x & 0xFF);
	send2displays(disp);
}while(++i < 4);
x++;



amplitude da tensao q ddeu origem a  um valor prodduzido pelo converso A/D

// Convert analog input (4 samples)
			
			// Start conversion
			AD1CON1bits.ASAM = 1;
         		
			// Wait while conversion not done (AD1IF == 0)
			while(IFS1bits.AD1IF == 0);

            // Calculate buffer average 
			int *p = (int *)(&ADC1BUF0);
			media = 0;
			int j;
			for( j = 0; j < 4; j++ )
			{
				media += p[j*4];
			}
			media = media / 4;

            // Calculate voltage amplitude
			V = (media * 33) / 1023; 

		    // Reset AD1IF
			IFS1bits.AD1IF = 0;   	  		
	
			// Convert voltage amplitude to decimal 
			V = toBCD(V); 
			i = 0;
 		
OUUU

int *p = (int *) (&ADC1BUF0);		
for(i = 0; i<16; i++){
	printInt(p[i*4], 10 | 4 << 10);
	printf(" ");		
}
	
	
	
	O programa
deverá efetuar 4 sequências de conversão A/D por segundo (cada uma com 8 amostras
consecutivas)

	volatile unsigned char voltage = 0; // Global variable 

IPC6bits.AD1IP = 2;
	IEC1bits.AD1IE = 1;
	IFS1bits.AD1IF = 0; // Reset AD1IF flag
 	EnableInterrupts(); // Global Interrupt Enable
 	
 	while(1)
 	{
 		delay(10); // Wait 10 ms using the core timer
 		if(i++ == 25) // 250 ms (4 samples/second)
 		{
 			AD1CON1bits.ASAM = 1;	// Start A/D conversion
 			i = 0; 					// i = 0;
 		}
 		send2displays(voltage);		// Send "voltage" variable to displays
 	}
 	
 	
 	
 	
 	void _int_(27) isr_adc(void){

	// Calculate buffer average (8 samples)
	int i, V;
	int media = 0;
	int *p = (int *)(&ADC1BUF0);
	
	for(i = 0; i < 16; i++)
		media += p[i*4];
 	media = media / 8;
 	
	V = (media * 33) / 1023;
    
	voltage = toBCD(V);  // Convert voltage amplitude to decimal. Assign it to "value2display"
	
    IFS1bits.AD1IF = 0;   // Reset AD1IF flag 
}
 	
 	
