Archive member included because of file (symbol)

/opt/pic32mx/lib/libdetpic32.a(xprintf.o)
                              exAulaP.o (xprintf)
/opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_addsub_df.o)
                              /opt/pic32mx/lib/libdetpic32.a(xprintf.o) (__adddf3)
/opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_mul_df.o)
                              /opt/pic32mx/lib/libdetpic32.a(xprintf.o) (__muldf3)
/opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_eq_df.o)
                              /opt/pic32mx/lib/libdetpic32.a(xprintf.o) (__eqdf2)
/opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_gt_df.o)
                              /opt/pic32mx/lib/libdetpic32.a(xprintf.o) (__gtdf2)
/opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_ge_df.o)
                              /opt/pic32mx/lib/libdetpic32.a(xprintf.o) (__gedf2)
/opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_lt_df.o)
                              /opt/pic32mx/lib/libdetpic32.a(xprintf.o) (__ltdf2)
/opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_si_to_df.o)
                              /opt/pic32mx/lib/libdetpic32.a(xprintf.o) (__floatsidf)
/opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_df_to_si.o)
                              /opt/pic32mx/lib/libdetpic32.a(xprintf.o) (__fixdfsi)
/opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_thenan_df.o)
                              /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_addsub_df.o) (__thenan_df)
/opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_pack_df.o)
                              /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_addsub_df.o) (__pack_d)
/opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_unpack_df.o)
                              /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_addsub_df.o) (__unpack_d)
/opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_fpcmp_parts_df.o)
                              /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_eq_df.o) (__fpcmp_parts_d)

Microchip PIC32 Memory-Usage Report

kseg0 Program-Memory Usage
section                    address  length [bytes]      (dec)  Description
-------                 ----------  -------------------------  -----------
.text                   0x9d001400         0x1cc4        7364  Application's executable code 
.rodata                 0x9d0030c8          0x120         288  Read-only constant data 
      Total kseg0_program_mem used  :      0x1de4        7652  1.5% of 0x7ec00

kseg0 Boot-Memory Usage
section                    address  length [bytes]      (dec)  Description
-------                 ----------  -------------------------  -----------
.startup                0x9d001000          0x2b0         688  C startup code 
         Total kseg0_boot_mem used  :       0x2b0         688  68.3% of 0x3f0

Exception-Memory Usage 
section                    address  length [bytes]      (dec)  Description
-------                 ----------  -------------------------  -----------
.app_excpt              0x9d000180           0x14          20  General-Exception handler 
          Total exception_mem used  :        0x14          20  0.5% of 0x1000

kseg1 Boot-Memory Usage
section                    address  length [bytes]      (dec)  Description
-------                 ----------  -------------------------  -----------
         Total kseg1_boot_mem used  :           0           0  <1% of 0x490
        --------------------------------------------------------------------------
         Total Program Memory used  :      0x20a8        8360  1.6% of 0x80480
        --------------------------------------------------------------------------


kseg1 Data-Memory Usage
section                    address  length [bytes]      (dec)  Description
-------                 ----------  -------------------------  -----------
.stack                  0xa0000000         0x2000        8192  Minimum space reserved for stack 
         Total kseg1_data_mem used  :      0x2000        8192  6.2% of 0x20000
        --------------------------------------------------------------------------
            Total Data Memory used  :      0x2000        8192  6.2% of 0x20000
        --------------------------------------------------------------------------

Memory Configuration

Name             Origin             Length             Attributes
kseg0_program_mem 0x000000009d001400 0x000000000007ec00 xr
kseg0_boot_mem   0x000000009d001000 0x00000000000003f0
exception_mem    0x000000009d000000 0x0000000000001000
kseg1_boot_mem   0x00000000bfc00000 0x0000000000000490
debug_exec_mem   0x00000000bfc02000 0x0000000000000ff0
config3          0x00000000bfc02ff0 0x0000000000000004
config2          0x00000000bfc02ff4 0x0000000000000004
config1          0x00000000bfc02ff8 0x0000000000000004
config0          0x00000000bfc02ffc 0x0000000000000004
kseg1_data_mem   0x00000000a0000000 0x0000000000020000 w !x
sfrs             0x00000000bf800000 0x0000000000100000
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

LOAD exAulaP.o
LOAD /opt/pic32mx/lib/libdetpic32.a
LOAD /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a
                0x0000000000000400                PROVIDE (_min_stack_size, 0x400)
                0x0000000000000000                PROVIDE (_min_heap_size, 0x0)
LOAD /opt/pic32mx/lib/startup.o
                0x0000000000000001                PROVIDE (_vector_spacing, 0x1)
                0x000000009d000000                _ebase_address = 0x9d000000
                0x0000000000000001                _vector_spacing = 0x1
                0x000000009d001800                _reset = 0x9d001800
                0x0000000000002000                _min_stack_size = 0x2000
                0x0000000000000000                _min_heap_size = 0x0
                0x00000000bfc00000                _RESET_ADDR = 0xbfc00000
                0x00000000bfc00380                _BEV_EXCPT_ADDR = 0xbfc00380
                0x00000000bfc00480                _DBG_EXCPT_ADDR = 0xbfc00480
                0x00000000bfc02000                _DBG_CODE_ADDR = 0xbfc02000
                0x000000009d000180                _GEN_EXCPT_ADDR = (_ebase_address + 0x180)

.config_BFC02FF0
 *(.config_BFC02FF0)

.config_BFC02FF4
 *(.config_BFC02FF4)

.config_BFC02FF8
 *(.config_BFC02FF8)

.config_BFC02FFC
 *(.config_BFC02FFC)

.startup        0x000000009d001000      0x2b0
 *(.startup)
 .startup       0x000000009d001000      0x2b0 /opt/pic32mx/lib/startup.o
                0x000000009d001000                startup
 *(.startup)

.reset
 *(.reset)

.bev_excpt
 *(.bev_handler)

.dbg_excpt      0x00000000bfc00480        0x0
                0x00000000bfc00480                . = (. + DEFINED (_DEBUGGER)?0x8:0x0)

.dbg_code       0x00000000bfc02000        0x0
                0x00000000bfc02000                . = (. + DEFINED (_DEBUGGER)?0xff0:0x0)

.app_excpt      0x000000009d000180       0x14
 *(.gen_handler)
 .gen_handler   0x000000009d000180       0x14 /opt/pic32mx/lib/startup.o

.vector_0       0x000000009d000200        0x0
 *(.vector_0)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_0) <= (_vector_spacing << 0x5))), function at exception vector 0 too large)

.vector_1       0x000000009d000220        0x0
 *(.vector_1)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_1) <= (_vector_spacing << 0x5))), function at exception vector 1 too large)

.vector_2       0x000000009d000240        0x0
 *(.vector_2)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_2) <= (_vector_spacing << 0x5))), function at exception vector 2 too large)

.vector_3       0x000000009d000260        0x0
 *(.vector_3)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_3) <= (_vector_spacing << 0x5))), function at exception vector 3 too large)

.vector_4       0x000000009d000280        0x0
 *(.vector_4)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_4) <= (_vector_spacing << 0x5))), function at exception vector 4 too large)

.vector_5       0x000000009d0002a0        0x0
 *(.vector_5)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_5) <= (_vector_spacing << 0x5))), function at exception vector 5 too large)

.vector_6       0x000000009d0002c0        0x0
 *(.vector_6)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_6) <= (_vector_spacing << 0x5))), function at exception vector 6 too large)

.vector_7       0x000000009d0002e0        0x0
 *(.vector_7)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_7) <= (_vector_spacing << 0x5))), function at exception vector 7 too large)

.vector_8       0x000000009d000300        0x0
 *(.vector_8)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_8) <= (_vector_spacing << 0x5))), function at exception vector 8 too large)

.vector_9       0x000000009d000320        0x0
 *(.vector_9)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_9) <= (_vector_spacing << 0x5))), function at exception vector 9 too large)

.vector_10      0x000000009d000340        0x0
 *(.vector_10)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_10) <= (_vector_spacing << 0x5))), function at exception vector 10 too large)

.vector_11      0x000000009d000360        0x0
 *(.vector_11)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_11) <= (_vector_spacing << 0x5))), function at exception vector 11 too large)

.vector_12      0x000000009d000380        0x0
 *(.vector_12)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_12) <= (_vector_spacing << 0x5))), function at exception vector 12 too large)

.vector_13      0x000000009d0003a0        0x0
 *(.vector_13)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_13) <= (_vector_spacing << 0x5))), function at exception vector 13 too large)

.vector_14      0x000000009d0003c0        0x0
 *(.vector_14)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_14) <= (_vector_spacing << 0x5))), function at exception vector 14 too large)

.vector_15      0x000000009d0003e0        0x0
 *(.vector_15)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_15) <= (_vector_spacing << 0x5))), function at exception vector 15 too large)

.vector_16      0x000000009d000400        0x0
 *(.vector_16)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_16) <= (_vector_spacing << 0x5))), function at exception vector 16 too large)

.vector_17      0x000000009d000420        0x0
 *(.vector_17)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_17) <= (_vector_spacing << 0x5))), function at exception vector 17 too large)

.vector_18      0x000000009d000440        0x0
 *(.vector_18)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_18) <= (_vector_spacing << 0x5))), function at exception vector 18 too large)

.vector_19      0x000000009d000460        0x0
 *(.vector_19)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_19) <= (_vector_spacing << 0x5))), function at exception vector 19 too large)

.vector_20      0x000000009d000480        0x0
 *(.vector_20)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_20) <= (_vector_spacing << 0x5))), function at exception vector 20 too large)

.vector_21      0x000000009d0004a0        0x0
 *(.vector_21)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_21) <= (_vector_spacing << 0x5))), function at exception vector 21 too large)

.vector_22      0x000000009d0004c0        0x0
 *(.vector_22)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_22) <= (_vector_spacing << 0x5))), function at exception vector 22 too large)

.vector_23      0x000000009d0004e0        0x0
 *(.vector_23)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_23) <= (_vector_spacing << 0x5))), function at exception vector 23 too large)

.vector_24      0x000000009d000500        0x0
 *(.vector_24)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_24) <= (_vector_spacing << 0x5))), function at exception vector 24 too large)

.vector_25      0x000000009d000520        0x0
 *(.vector_25)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_25) <= (_vector_spacing << 0x5))), function at exception vector 25 too large)

.vector_26      0x000000009d000540        0x0
 *(.vector_26)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_26) <= (_vector_spacing << 0x5))), function at exception vector 26 too large)

.vector_27      0x000000009d000560        0x0
 *(.vector_27)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_27) <= (_vector_spacing << 0x5))), function at exception vector 27 too large)

.vector_28      0x000000009d000580        0x0
 *(.vector_28)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_28) <= (_vector_spacing << 0x5))), function at exception vector 28 too large)

.vector_29      0x000000009d0005a0        0x0
 *(.vector_29)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_29) <= (_vector_spacing << 0x5))), function at exception vector 29 too large)

.vector_30      0x000000009d0005c0        0x0
 *(.vector_30)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_30) <= (_vector_spacing << 0x5))), function at exception vector 30 too large)

.vector_31      0x000000009d0005e0        0x0
 *(.vector_31)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_31) <= (_vector_spacing << 0x5))), function at exception vector 31 too large)

.vector_32      0x000000009d000600        0x0
 *(.vector_32)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_32) <= (_vector_spacing << 0x5))), function at exception vector 32 too large)

.vector_33      0x000000009d000620        0x0
 *(.vector_33)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_33) <= (_vector_spacing << 0x5))), function at exception vector 33 too large)

.vector_34      0x000000009d000640        0x0
 *(.vector_34)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_34) <= (_vector_spacing << 0x5))), function at exception vector 34 too large)

.vector_35      0x000000009d000660        0x0
 *(.vector_35)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_35) <= (_vector_spacing << 0x5))), function at exception vector 35 too large)

.vector_36      0x000000009d000680        0x0
 *(.vector_36)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_36) <= (_vector_spacing << 0x5))), function at exception vector 36 too large)

.vector_37      0x000000009d0006a0        0x0
 *(.vector_37)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_37) <= (_vector_spacing << 0x5))), function at exception vector 37 too large)

.vector_38      0x000000009d0006c0        0x0
 *(.vector_38)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_38) <= (_vector_spacing << 0x5))), function at exception vector 38 too large)

.vector_39      0x000000009d0006e0        0x0
 *(.vector_39)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_39) <= (_vector_spacing << 0x5))), function at exception vector 39 too large)

.vector_40      0x000000009d000700        0x0
 *(.vector_40)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_40) <= (_vector_spacing << 0x5))), function at exception vector 40 too large)

.vector_41      0x000000009d000720        0x0
 *(.vector_41)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_41) <= (_vector_spacing << 0x5))), function at exception vector 41 too large)

.vector_42      0x000000009d000740        0x0
 *(.vector_42)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_42) <= (_vector_spacing << 0x5))), function at exception vector 42 too large)

.vector_43      0x000000009d000760        0x0
 *(.vector_43)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_43) <= (_vector_spacing << 0x5))), function at exception vector 43 too large)

.vector_44      0x000000009d000780        0x0
 *(.vector_44)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_44) <= (_vector_spacing << 0x5))), function at exception vector 44 too large)

.vector_45      0x000000009d0007a0        0x0
 *(.vector_45)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_45) <= (_vector_spacing << 0x5))), function at exception vector 45 too large)

.vector_46      0x000000009d0007c0        0x0
 *(.vector_46)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_46) <= (_vector_spacing << 0x5))), function at exception vector 46 too large)

.vector_47      0x000000009d0007e0        0x0
 *(.vector_47)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_47) <= (_vector_spacing << 0x5))), function at exception vector 47 too large)

.vector_48      0x000000009d000800        0x0
 *(.vector_48)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_48) <= (_vector_spacing << 0x5))), function at exception vector 48 too large)

.vector_49      0x000000009d000820        0x0
 *(.vector_49)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_49) <= (_vector_spacing << 0x5))), function at exception vector 49 too large)

.vector_50      0x000000009d000840        0x0
 *(.vector_50)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_50) <= (_vector_spacing << 0x5))), function at exception vector 50 too large)

.vector_51      0x000000009d000860        0x0
 *(.vector_51)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_51) <= (_vector_spacing << 0x5))), function at exception vector 51 too large)

.vector_52      0x000000009d000880        0x0
 *(.vector_52)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_52) <= (_vector_spacing << 0x5))), function at exception vector 52 too large)

.vector_53      0x000000009d0008a0        0x0
 *(.vector_53)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_53) <= (_vector_spacing << 0x5))), function at exception vector 53 too large)

.vector_54      0x000000009d0008c0        0x0
 *(.vector_54)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_54) <= (_vector_spacing << 0x5))), function at exception vector 54 too large)

.vector_55      0x000000009d0008e0        0x0
 *(.vector_55)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_55) <= (_vector_spacing << 0x5))), function at exception vector 55 too large)

.vector_56      0x000000009d000900        0x0
 *(.vector_56)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_56) <= (_vector_spacing << 0x5))), function at exception vector 56 too large)

.vector_57      0x000000009d000920        0x0
 *(.vector_57)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_57) <= (_vector_spacing << 0x5))), function at exception vector 57 too large)

.vector_58      0x000000009d000940        0x0
 *(.vector_58)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_58) <= (_vector_spacing << 0x5))), function at exception vector 58 too large)

.vector_59      0x000000009d000960        0x0
 *(.vector_59)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_59) <= (_vector_spacing << 0x5))), function at exception vector 59 too large)

.vector_60      0x000000009d000980        0x0
 *(.vector_60)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_60) <= (_vector_spacing << 0x5))), function at exception vector 60 too large)

.vector_61      0x000000009d0009a0        0x0
 *(.vector_61)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_61) <= (_vector_spacing << 0x5))), function at exception vector 61 too large)

.vector_62      0x000000009d0009c0        0x0
 *(.vector_62)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_62) <= (_vector_spacing << 0x5))), function at exception vector 62 too large)

.vector_63      0x000000009d0009e0        0x0
 *(.vector_63)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_63) <= (_vector_spacing << 0x5))), function at exception vector 63 too large)

.text           0x000000009d001400     0x1cc4
                0x000000009d001400                _text_begin = .
 *(.text .stub .text.* .gnu.linkonce.t.*)
 .text          0x000000009d001400      0x298 exAulaP.o
                0x000000009d0014ac                configureUART
                0x000000009d00142c                myputs
                0x000000009d0015f4                main
                0x000000009d001400                putc
                0x000000009d001460                delay
 .text          0x000000009d001698      0x9b0 /opt/pic32mx/lib/libdetpic32.a(xprintf.o)
                0x000000009d0016c0                xprintf
 .text          0x000000009d002048      0x3e0 /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_addsub_df.o)
                0x000000009d00235c                __adddf3
                0x000000009d0023bc                __subdf3
 .text          0x000000009d002428      0x358 /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_mul_df.o)
                0x000000009d002428                __muldf3
 .text          0x000000009d002780       0x90 /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_eq_df.o)
                0x000000009d002780                __eqdf2
 .text          0x000000009d002810       0x90 /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_gt_df.o)
                0x000000009d002810                __gtdf2
 .text          0x000000009d0028a0       0x90 /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_ge_df.o)
                0x000000009d0028a0                __gedf2
 .text          0x000000009d002930       0x90 /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_lt_df.o)
                0x000000009d002930                __ltdf2
 .text          0x000000009d0029c0       0xc8 /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_si_to_df.o)
                0x000000009d0029c0                __floatsidf
 .text          0x000000009d002a88       0xd4 /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_df_to_si.o)
                0x000000009d002a88                __fixdfsi
 .text          0x000000009d002b5c      0x234 /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_pack_df.o)
                0x000000009d002b5c                __pack_d
 .text          0x000000009d002d90      0x11c /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_unpack_df.o)
                0x000000009d002d90                __unpack_d
 .text          0x000000009d002eac      0x168 /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_fpcmp_parts_df.o)
                0x000000009d002eac                __fpcmp_parts_d
 .text          0x000000009d003014       0xb0 /opt/pic32mx/lib/startup.o
                0x000000009d003084                printStr
                0x000000009d003064                printInt
                0x000000009d003044                readInt
                0x000000009d0030bc                resetCoreTimer
                0x000000009d003034                putChar
                0x000000009d003094                readStr
                0x000000009d003074                printInt10
                0x000000009d003014                inkey
                0x000000009d0030a4                exit
                0x000000009d003024                getChar
                0x000000009d003054                readInt10
                0x000000009d0030b4                readCoreTimer
 *(.text.*personality*)
 *(.gnu.warning)
 *(.mips16.fn.*)
 *(.mips16.call.*)
                0x000000009d0030c4                _text_end = .

.rodata         0x000000009d0030c8      0x120
 *(.rodata .rodata.* .gnu.linkonce.r.*)
 .rodata.str1.4
                0x000000009d0030c8       0x26 exAulaP.o
                                         0x28 (size before relaxing)
 *fill*         0x000000009d0030ee        0x2 00
 .rodata.str1.4
                0x000000009d0030f0       0x11 /opt/pic32mx/lib/libdetpic32.a(xprintf.o)
                                         0x14 (size before relaxing)
 *fill*         0x000000009d003101        0x7 00
 .rodata.cst8   0x000000009d003108       0x20 /opt/pic32mx/lib/libdetpic32.a(xprintf.o)
 .rodata        0x000000009d003128       0x84 /opt/pic32mx/lib/libdetpic32.a(xprintf.o)
 *fill*         0x000000009d0031ac        0x4 00
 .rodata.cst8   0x000000009d0031b0        0x8 /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_si_to_df.o)
 .rodata        0x000000009d0031b8       0x18 /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_thenan_df.o)
                0x000000009d0031b8                __thenan_df
 .rodata        0x000000009d0031d0       0x15 /opt/pic32mx/lib/startup.o
 *(.rodata1)
                0x000000009d0031e8                . = ALIGN (0x4)
 *fill*         0x000000009d0031e5        0x3 00

.sdata2         0x000000009d0031e8        0x0
 *(.sdata2 .sdata2.* .gnu.linkonce.s2.*)
                0x000000009d0031e8                . = ALIGN (0x4)

.sbss2          0x000000009d0031e8        0x0
 *(.sbss2 .sbss2.* .gnu.linkonce.sb2.*)
                0x000000009d0031e8                . = ALIGN (0x4)

.eh_frame_hdr
 *(.eh_frame_hdr)

.eh_frame
 *(.eh_frame)

.dbg_data       0x00000000a0000000        0x0
                0x00000000a0000000                . = (. + DEFINED (_DEBUGGER)?0x200:0x0)

.data           0x00000000a0000000        0x0 load address 0x000000009d0031e8
                0x00000000a0000000                _data_begin = .
 *(.data .data.* .gnu.linkonce.d.*)
 *(.gnu.linkonce.d.*personality*)
 *(.data1)
                0x000000009d0031e8                _data_image_begin = LOADADDR (.data)

.eh_frame
 *(.eh_frame)
                0x00000000a0007ff0                _gp = (ALIGN (0x10) + 0x7ff0)

.got
 *(.got.plt)
 *(.got)

.sdata          0x00000000a0000000        0x0 load address 0x000000009d0031e8
                0x00000000a0000000                _sdata_begin = .
 *(.sdata .sdata.* .gnu.linkonce.s.*)
                0x00000000a0000000                _sdata_end = .

.lit8
 *(.lit8)

.lit4
 *(.lit4)
                0x00000000a0000000                . = ALIGN (0x4)
                0x00000000a0000000                _data_end = .
                0x00000000a0000000                _bss_begin = .

.sbss           0x00000000a0000000        0x0
                0x00000000a0000000                _sbss_begin = .
 *(.dynsbss)
 *(.sbss .sbss.* .gnu.linkonce.sb.*)
 *(.scommon)
                0x00000000a0000000                _sbss_end = .

.bss            0x00000000a0000000        0x0
 *(.dynbss)
 *(.bss .bss.* .gnu.linkonce.b.*)
 *(COMMON)
                0x00000000a0000000                . = ALIGN (0x4)
                0x00000000a0000000                . = ALIGN (0x4)
                0x00000000a0000000                _end = .
                0x00000000a0000000                _bss_end = .

.persist        0x00000000a0000000        0x0
 *(.persist)
                0x00000000a0000000                . = ALIGN (0x4)

.heap           0x00000000a0000000        0x0
                0x00000000a0000000                _heap = .
                0x00000000a0000000                . = (. + _min_heap_size)

.stack          0x00000000a0000000     0x2000
                0x00000000a0000000                _splim = .
                0x00000000a0000000                _SPLIM = .
                0x00000000a0002000                . = (. + _min_stack_size)
 *fill*         0x00000000a0000000     0x2000 00

.ramfunc        0x00000000a0002000        0x0 load address 0x000000009d0031e8
                0x00000000a0002000                _ramfunc_begin = .
 *(.ramfunc .ramfunc.*)
                0x00000000a0002000                . = ALIGN (0x4)
                0x00000000a0002000                _ramfunc_end = .
                0x000000009d0031e8                _ramfunc_image_begin = LOADADDR (.ramfunc)
                0x0000000000000000                _ramfunc_length = SIZEOF (.ramfunc)
                0x0000000000002000                _bmxdkpba_address = (_ramfunc_begin - 0xa0000000)
                0x0000000000020000                _bmxdudba_address = 0x20000
                0x0000000000020000                _bmxdupba_address = 0x20000
                0x00000000a0020000                _stack = (_ramfunc_length > 0x0)?(_ramfunc_begin - 0x4):0xa0020000
                0x0000000000000001                ASSERT (((_min_stack_size + _min_heap_size) <= (_stack - _heap)), Not enough space to allocate both stack and heap.  Reduce heap and/or stack size.)

.pdr            0x0000000000000000      0x280
 *(.pdr)
 .pdr           0x0000000000000000       0xa0 exAulaP.o
 .pdr           0x00000000000000a0       0x40 /opt/pic32mx/lib/libdetpic32.a(xprintf.o)
 .pdr           0x00000000000000e0       0x60 /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_addsub_df.o)
 .pdr           0x0000000000000140       0x20 /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_mul_df.o)
 .pdr           0x0000000000000160       0x20 /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_eq_df.o)
 .pdr           0x0000000000000180       0x20 /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_gt_df.o)
 .pdr           0x00000000000001a0       0x20 /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_ge_df.o)
 .pdr           0x00000000000001c0       0x20 /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_lt_df.o)
 .pdr           0x00000000000001e0       0x20 /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_si_to_df.o)
 .pdr           0x0000000000000200       0x20 /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_df_to_si.o)
 .pdr           0x0000000000000220       0x20 /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_pack_df.o)
 .pdr           0x0000000000000240       0x20 /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_unpack_df.o)
 .pdr           0x0000000000000260       0x20 /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_fpcmp_parts_df.o)

.reginfo        0x0000000000000000       0x18
 *(.reginfo)
 .reginfo       0x0000000000000000       0x18 exAulaP.o

.stab
 *(.stab)

.stabstr
 *(.stabstr)

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment        0x0000000000000000      0x436
 *(.comment)
 .comment       0x0000000000000000       0x4d exAulaP.o
 .comment       0x000000000000004d       0x4d /opt/pic32mx/lib/libdetpic32.a(xprintf.o)
 .comment       0x000000000000009a       0x4d /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_addsub_df.o)
 .comment       0x00000000000000e7       0x4d /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_mul_df.o)
 .comment       0x0000000000000134       0x4d /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_eq_df.o)
 .comment       0x0000000000000181       0x4d /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_gt_df.o)
 .comment       0x00000000000001ce       0x4d /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_ge_df.o)
 .comment       0x000000000000021b       0x4d /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_lt_df.o)
 .comment       0x0000000000000268       0x4d /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_si_to_df.o)
 .comment       0x00000000000002b5       0x4d /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_df_to_si.o)
 .comment       0x0000000000000302       0x4d /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_thenan_df.o)
 .comment       0x000000000000034f       0x4d /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_pack_df.o)
 .comment       0x000000000000039c       0x4d /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_unpack_df.o)
 .comment       0x00000000000003e9       0x4d /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a(_fpcmp_parts_df.o)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info .gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)

.debug_weaknames
 *(.debug_weaknames)

.debug_funcnames
 *(.debug_funcnames)

.debug_typenames
 *(.debug_typenames)

.debug_varnames
 *(.debug_varnames)

/DISCARD/
 *(.note.GNU-stack)
OUTPUT(exAulaP.elf elf32-tradlittlemips)

.mdebug.abi32   0x000000009d0031e8        0x0
